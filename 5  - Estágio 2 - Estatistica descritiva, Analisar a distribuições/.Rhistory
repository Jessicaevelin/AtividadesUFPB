# Carregando os dados
sinistro <- read.csv("sinistro_automoveis.csv", sep = ",")
sinistro <- sinistro$x
encoding: utf-8
?hist
# Histrograma
hist(sinistro, freq = NULL)
# Histrograma
hist(sinistro, xlim = 100)
# Histrograma
hist(sinistro, xlim = 1000)
# Histrograma
hist(sinistro, xlim = 10000)
# Histrograma
hist(sinistro, xlim = 10)
# Histrograma
hist(sinistro, xlim = 10, ylim = 10)
# Histrograma
hist(sinistro, breaks = 999)
# Histrograma
hist(sinistro, breaks = 100)
# Histrograma
hist(sinistro, breaks = 200)
# Histrograma
hist(sinistro, breaks = 300)
# Histrograma
hist(sinistro, breaks = 3000)
# Histrograma
hist(sinistro, breaks = 800)
# Histrograma
hist(sinistro, breaks = 1)
# Histrograma
hist(sinistro, breaks = 10)
# Histrograma
hist(sinistro, breaks = 100)
# Histrograma
hist(sinistro, breaks = 50)
# Histrograma
hist(sinistro, main = Histograma de sinistro)
# Histrograma
hist(sinistro, main = Histograma de sinistro)
# Histrograma
hist(sinistro, main = "Histograma de sinistro")
# Carregando os dados
sinistro <- read.csv("sinistro_automoveis.csv", sep = ",")
sinistro <- sinistro$x
# Histrograma
hist(sinistro, main = "Histograma dos sinistro")
# Estatísticas
summary(sinistro)
media <- mean(sinistro)
desvio <- sd(sinistro)
n <- length(sinistro)
# Função para calcular diversas estatísticas
estatisticas <- function(x){
x <- x[!is.na(x)] # isso serve para que ele omita as observações com NA
me <- mean(x)
med <- median(x)
n <- length(x)
s <- sd(x)
mi <- min(x)
ma <- max(x)
q25 <- quantile(x, probs = 0.25)
q75 <- quantile(x, probs = 0.75)
return(c(n = n, media = me, mediana = med, desvio = s,
Q = q25, Q = q75, min = mi, max = ma))
}
# calculando as estatísticas descritivas
estatisticas(sinistro)
# Carregar pacote para realizar a estimação pela máxima-verossimilhança
library(fitdistrplus)
# Função do pacote que cria dois gráficos, o histograma e a acumulada
plotdist(sinistro, histo=TRUE, demp = TRUE)
# Função que demonstra o gráfico de Cullen e Frey cuja função é apresentar a proximidade da distribuição observada em relação às teóricas, tomando como base a curtose e assimetria
descdist(sinistro)
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
# Se a estimação não convergir conforme acima, utilize parâmetros iniciais de sugestão diferentes de 0:
fitdist(sinistro, "gamma", start = list(shape = 0.06, rate = 0.001))
# Estimando os parâmetros para uma Weibull
fitw <- fitdist(sinistro, "weibull")
fitw
# Estimando os parâmetros para uma Lognormal
fitln <- fitdist(sinistro, "lnorm")
fitln
# Visualizando a distribuição empírica em relação às estimadas
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dgamma(x, shape = fitg$estimate[1], rate = fitg$estimate[2]), add = TRUE, col = "blue")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "green")
curve(dlnorm(x, fitln$estimate[1], fitln$estimate[2]), add = TRUE, col = "red")
# Criar quatro gráficos: Densidade, Acumulada, QQ-plot e PP-plot
par(mfrow=c(2,2))
plot.legend <- c("Gama","Weibull", "Lognormal")
denscomp(list(fitg,fitw, fitln), legendtext = plot.legend)
cdfcomp (list(fitg,fitw, fitln), legendtext = plot.legend)
qqcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
ppcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
# Para finalizar a análise, avaliaremos o Teste Kolmogorov-Sminorv e o critério informacional de Akaike com a função gofstat
gofstat(list(fitg,fitw, fitln), fitnames = c("Gama","Weibull", "LogNormal"))
**O menor valor é 1.000 e o máximo é 999.000, Analisando o primeiro quartil
# calculando as estatísticas descritivas
estatisticas(sinistro, 4)
sinistros, 2
# Estatísticas
summary(sinistro, 4)
# Estatísticas
summary(sinistro, 1)
?function
help(function)
?function()
?plotdist
?plotdist
?plotdist
?descdist
?fitdistrplus
library(fitdistrplus)
# Realizando as estimações
fitg <- fitdist(sinistro, "beta")
# Realizando as estimações
fitg <- fitdist(sinistro, "beta")
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
###### Aula de ajuste de distribuição ######
# Carregando os dados
sinistro <- read.csv("sinistro_automoveis.csv", sep = ",")
sinistro <- sinistro$x
# Histrograma
hist(sinistro)
# Estatísticas
summary(sinistro)
media <- mean(sinistro)
desvio <- sd(sinistro)
n <- length(sinistro)
# Função para calcular diversas estatísticas
estatisticas <- function(x){
x <- x[!is.na(x)] # isso serve para que ele omita as observações com NA
me <- mean(x)
med <- median(x)
n <- length(x)
s <- sd(x)
mi <- min(x)
ma <- max(x)
q25 <- quantile(x, probs = 0.25)
q75 <- quantile(x, probs = 0.75)
return(c(n = n, media = me, mediana = med, desvio = s,
Q = q25, Q = q75, min = mi, max = ma))
}
# calculando as estatísticas descritivas
estatisticas(sinistro)
# Carregar pacote para realizar a estimação pela máxima-verossimilhança
library(fitdistrplus)
# Função do pacote que cria dois gráficos, o histograma e a acumulada
plotdist(sinistro, histo=TRUE, demp = TRUE)
# Função que demonstra o gráfico de Cullen e Frey cuja função é apresentar a proximidade da distribuição observada em relação às teóricas, tomando como base a curtose e assimetria
descdist(sinistro)
# Realizando as estimações
fitg <- fitdist(sinistro, "beta")
gamma
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
###### Aula de ajuste de distribuição ######
# Carregando os dados
sinistro <- read.csv("sinistro_automoveis.csv", sep = ",")
sinistro <- sinistro$x
# Histrograma
hist(sinistro)
# Estatísticas
summary(sinistro)
media <- mean(sinistro)
desvio <- sd(sinistro)
n <- length(sinistro)
# Função para calcular diversas estatísticas
estatisticas <- function(x){
x <- x[!is.na(x)] # isso serve para que ele omita as observações com NA
me <- mean(x)
med <- median(x)
n <- length(x)
s <- sd(x)
mi <- min(x)
ma <- max(x)
q25 <- quantile(x, probs = 0.25)
q75 <- quantile(x, probs = 0.75)
return(c(n = n, media = me, mediana = med, desvio = s,
Q = q25, Q = q75, min = mi, max = ma))
}
# calculando as estatísticas descritivas
estatisticas(sinistro)
# Carregar pacote para realizar a estimação pela máxima-verossimilhança
library(fitdistrplus)
# Função do pacote que cria dois gráficos, o histograma e a acumulada
plotdist(sinistro, histo=TRUE, demp = TRUE)
# Função que demonstra o gráfico de Cullen e Frey cuja função é apresentar a proximidade da distribuição observada em relação às teóricas, tomando como base a curtose e assimetria
descdist(sinistro)
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
fitg
fitg
# Carregando os dados
sinistro <- read.csv("sinistro_automoveis.csv", sep = ",")
sinistro <- sinistro$x
# Histrograma
hist(sinistro, main = "Histograma dos sinistro")
# Estatísticas
summary(sinistro)
media <- mean(sinistro)
desvio <- sd(sinistro)
n <- length(sinistro)
# Função para calcular diversas estatísticas
estatisticas <- function(x){
x <- x[!is.na(x)] # isso serve para que ele omita as observações com NA
me <- mean(x)
med <- median(x)
n <- length(x)
s <- sd(x)
mi <- min(x)
ma <- max(x)
q25 <- quantile(x, probs = 0.25)
q75 <- quantile(x, probs = 0.75)
return(c(n = n, media = me, mediana = med, desvio = s,
Q = q25, Q = q75, min = mi, max = ma))
}
# calculando as estatísticas descritivas
estatisticas(sinistro)
# Carregar pacote para realizar a estimação pela máxima-verossimilhança
library(fitdistrplus)
# Função do pacote que cria dois gráficos, o histograma e a acumulada
plotdist(sinistro, histo=TRUE, demp = TRUE)
# Função que demonstra o gráfico de Cullen e Frey cuja função é apresentar a proximidade da distribuição observada em relação às teóricas, tomando como base a curtose e assimetria
descdist(sinistro)
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
# Carregando os dados
sinistro <- read.csv("sinistro_automoveis.csv", sep = ",")
sinistro <- sinistro$x
# Histrograma
hist(sinistro, main = "Histograma dos sinistro")
# Estatísticas
summary(sinistro)
media <- mean(sinistro)
desvio <- sd(sinistro)
n <- length(sinistro)
# Função para calcular diversas estatísticas
estatisticas <- function(x){
x <- x[!is.na(x)] # isso serve para que ele omita as observações com NA
me <- mean(x)
med <- median(x)
n <- length(x)
s <- sd(x)
mi <- min(x)
ma <- max(x)
q25 <- quantile(x, probs = 0.25)
q75 <- quantile(x, probs = 0.75)
return(c(n = n, media = me, mediana = med, desvio = s,
Q = q25, Q = q75, min = mi, max = ma))
}
# calculando as estatísticas descritivas
estatisticas(sinistro)
# Carregar pacote para realizar a estimação pela máxima-verossimilhança
library(fitdistrplus)
# Função do pacote que cria dois gráficos, o histograma e a acumulada
plotdist(sinistro, histo=TRUE, demp = TRUE)
# Função que demonstra o gráfico de Cullen e Frey cuja função é apresentar a proximidade da distribuição observada em relação às teóricas, tomando como base a curtose e assimetria
descdist(sinistro)
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
# Se a estimação não convergir conforme acima, utilize parâmetros iniciais de sugestão diferentes de 0:
fitdist(sinistro, "gamma", start = list(shape = 0.06, rate = 0.001))
# Estimando os parâmetros para uma Weibull
fitw <- fitdist(sinistro, "weibull")
fitw
# Estimando os parâmetros para uma Lognormal
fitln <- fitdist(sinistro, "lnorm")
fitln
# Visualizando a distribuição empírica em relação às estimadas
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dgamma(x, shape = fitg$estimate[1], rate = fitg$estimate[2]), add = TRUE, col = "blue")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "green")
curve(dlnorm(x, fitln$estimate[1], fitln$estimate[2]), add = TRUE, col = "red")
# Criar quatro gráficos: Densidade, Acumulada, QQ-plot e PP-plot
par(mfrow=c(2,2))
plot.legend <- c("Gama","Weibull", "Lognormal")
denscomp(list(fitg,fitw, fitln), legendtext = plot.legend)
cdfcomp (list(fitg,fitw, fitln), legendtext = plot.legend)
qqcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
ppcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
# Para finalizar a análise, avaliaremos o Teste Kolmogorov-Sminorv e o critério informacional de Akaike com a função gofstat
gofstat(list(fitg,fitw, fitln), fitnames = c("Gama","Weibull", "LogNormal"))
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
fitg <- fitdist(sinistro, "gamma")
fitg
# Se a estimação não convergir conforme acima, utilize parâmetros iniciais de sugestão diferentes de 0:
fitdist(sinistro, "gamma", start = list(shape = 0.06, rate = 0.001))
# Estimando os parâmetros para uma Weibull
fitw <- fitdist(sinistro, "weibull")
fitw
# Estimando os parâmetros para uma Weibull
fitw <- fitdist(sinistro, "weibull")
fitw
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dgamma(x, shape = fitg$estimate[1], rate = fitg$estimate[2]), add = TRUE, col = "blue")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "green")
curve(dlnorm(x, fitln$estimate[1], fitln$estimate[2]), add = TRUE, col = "red")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "green")
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "green")
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "green")
# Criar quatro gráficos: Densidade, Acumulada, QQ-plot e PP-plot
par(mfrow=c(2,2))
plot.legend <- c("Gama","Weibull", "Lognormal")
denscomp(list(fitg,fitw, fitln), legendtext = plot.legend)
cdfcomp (list(fitg,fitw, fitln), legendtext = plot.legend)
qqcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
ppcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
# Criar quatro gráficos: Densidade, Acumulada, QQ-plot e PP-plot
par(mfrow=c(2,2))
plot.legend <- c("Gama","Weibull", "Lognormal")
denscomp(list(fitg,fitw, fitln), legendtext = plot.legend)
cdfcomp (list(fitg,fitw, fitln), legendtext = plot.legend)
qqcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
ppcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
denscomp(list(fitg,fitw, fitln), legendtext = plot.legend)
cdfcomp (list(fitg,fitw, fitln), legendtext = plot.legend)
# Para finalizar a análise, avaliaremos o Teste Kolmogorov-Sminorv e o critério informacional de Akaike com a função gofstat
gofstat(list(fitg,fitw, fitln), fitnames = c("Gama","Weibull", "LogNormal"))
# Carregando os dados
sinistro <- read.csv("sinistro_automoveis.csv", sep = ",")
sinistro <- sinistro$x
# Histrograma
hist(sinistro, main = "Histograma dos sinistro")
# Estatísticas
summary(sinistro)
media <- mean(sinistro)
desvio <- sd(sinistro)
n <- length(sinistro)
# Função para calcular diversas estatísticas
estatisticas <- function(x){
x <- x[!is.na(x)] # isso serve para que ele omita as observações com NA
me <- mean(x)
med <- median(x)
n <- length(x)
s <- sd(x)
mi <- min(x)
ma <- max(x)
q25 <- quantile(x, probs = 0.25)
q75 <- quantile(x, probs = 0.75)
return(c(n = n, media = me, mediana = med, desvio = s,
Q = q25, Q = q75, min = mi, max = ma))
}
# calculando as estatísticas descritivas
estatisticas(sinistro)
# Carregar pacote para realizar a estimação pela máxima-verossimilhança
library(fitdistrplus)
# Função do pacote que cria dois gráficos, o histograma e a acumulada
plotdist(sinistro, histo=TRUE, demp = TRUE)
# Função que demonstra o gráfico de Cullen e Frey cuja função é apresentar a proximidade da distribuição observada em relação às teóricas, tomando como base a curtose e assimetria
descdist(sinistro)
# Realizando as estimações
fitg <- fitdist(sinistro, "gamma")
fitg
# Se a estimação não convergir conforme acima, utilize parâmetros iniciais de sugestão diferentes de 0:
fitdist(sinistro, "gamma", start = list(shape = 0.06, rate = 0.001))
# Estimando os parâmetros para uma Weibull
fitw <- fitdist(sinistro, "weibull")
fitw
# Estimando os parâmetros para uma Lognormal
fitln <- fitdist(sinistro, "lnorm")
fitln
# Visualizando a distribuição empírica em relação às estimadas
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dgamma(x, shape = fitg$estimate[1], rate = fitg$estimate[2]), add = TRUE, col = "blue")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "green")
curve(dlnorm(x, fitln$estimate[1], fitln$estimate[2]), add = TRUE, col = "red")
# Criar quatro gráficos: Densidade, Acumulada, QQ-plot e PP-plot
par(mfrow=c(2,2))
plot.legend <- c("Gama","Weibull", "Lognormal")
denscomp(list(fitg,fitw, fitln), legendtext = plot.legend)
cdfcomp (list(fitg,fitw, fitln), legendtext = plot.legend)
qqcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
ppcomp  (list(fitg,fitw,fitln), legendtext = plot.legend)
# Para finalizar a análise, avaliaremos o Teste Kolmogorov-Sminorv e o critério informacional de Akaike com a função gofstat
gofstat(list(fitg,fitw, fitln), fitnames = c("Gama","Weibull", "LogNormal"))
library(fitdistrplus)
install.packages("fitdistrplus")
sinistro <- read.csv("sinistros.csv", header = TRUE, sep=",")
head(sinistro)
sinistro <- sinistro$x
sinistro <- sinistro$x
# summary
summary(sinistro)
# desvio padrão
sd(sinistro)
# histograma
hist(sinistro)
descdist(sinistro)
install.packages("fitdistrplus")
library(fitdistrplus)
library(fitdistrplus)
descdist(sinistro)
fit <- fitdist(sinistro, "gamma")
fitw <- fitdist(sinistro, "weibull")
fitln <- fitdist(sinistro, "lnorm")
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dgamma(x, fit$estimate[1], fit$estimate[2]), add = TRUE, col = "green")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "red")
curve(dlnorm(x, fitln$estimate[1], fitln$estimate[2]), add = TRUE, col = "blue")
library(fitdistrplus)
sinistro <- read.csv("sinistros.csv", header = TRUE, sep=",")
head(sinistro)
sinistro <- sinistro$x
# summary
summary(sinistro)
# desvio padrão
sd(sinistro)
# histograma
hist(sinistro)
descdist(sinistro)
fit <- fitdist(sinistro, "gamma")
fitw <- fitdist(sinistro, "weibull")
fitln <- fitdist(sinistro, "lnorm")
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dgamma(x, fit$estimate[1], fit$estimate[2]), add = TRUE, col = "green")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "red")
curve(dlnorm(x, fitln$estimate[1], fitln$estimate[2]), add = TRUE, col = "blue")
plotdist(sinistro, histo = TRUE, demp = TRUE)
fit_w  <- fitdist(sinistro, "weibull")
fit_g  <- fitdist(sinistro, "gamma")
fit_ln <- fitdist(sinistro, "lnorm")
par(mfrow=c(2,2))
plot.legend <- c("Weibull", "Gamma", "Lognormal")
denscomp(list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
cdfcomp (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
qqcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
ppcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
library(actuar)
library(actuar)
install.packages(actuar)
install.packages("actuar")
library(actuar)
fit_ll <- fitdist(sinistro, "llogis", start = list(shape = 1, scale = 500))
fit_P  <- fitdist(sinistro, "pareto", start = list(shape = 1, scale = 500))
library(fitdistrplus)
sinistro <- read.csv("sinistros.csv", header = TRUE, sep=",")
head(sinistro)
sinistro <- sinistro$x
# summary
summary(sinistro)
# desvio padrão
sd(sinistro)
# histograma
hist(sinistro)
descdist(sinistro)
fit <- fitdist(sinistro, "gamma")
fitw <- fitdist(sinistro, "weibull")
fitln <- fitdist(sinistro, "lnorm")
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dgamma(x, fit$estimate[1], fit$estimate[2]), add = TRUE, col = "green")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "red")
curve(dlnorm(x, fitln$estimate[1], fitln$estimate[2]), add = TRUE, col = "blue")
plotdist(sinistro, histo = TRUE, demp = TRUE)
fit_w  <- fitdist(sinistro, "weibull")
fit_g  <- fitdist(sinistro, "gamma")
fit_ln <- fitdist(sinistro, "lnorm")
par(mfrow=c(2,2))
plot.legend <- c("Weibull", "Gamma", "Lognormal")
denscomp(list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
cdfcomp (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
qqcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
ppcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
library(actuar)
fit_ll <- fitdist(sinistro, "llogis", start = list(shape = 1, scale = 500))
fit_P  <- fitdist(sinistro, "pareto", start = list(shape = 1, scale = 500))
summary(fit_ll)
summary(fit_P)
par(mfrow=c(2,2))
plot.legend <- c("gamma", "weibull", "loglogistic", "Pareto")
denscomp(list(fit_g,fit_w, fit_ll, fit_P), legendtext = plot.legend)
cdfcomp (list(fit_g,fit_w, fit_ll, fit_P), legendtext = plot.legend)
qqcomp  (list(fit_g,fit_w, fit_ll, fit_P), legendtext = plot.legend)
ppcomp  (list(fit_g,fit_w, fit_ll, fit_P), legendtext = plot.legend)
gofstat(list(fit_w, fit_g, fit_ln, fit_ll, fit_P), fitnames = c("Weibull","Gamma","LogNormal", "Loglogística", "Pareto"))
