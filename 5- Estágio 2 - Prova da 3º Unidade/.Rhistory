# Qual a dimensão do data frame?
dim(dados)
# separado apenas o x do data frame
sin <- dados$x #sin = sinistros(x)
head(sin)
dados <- read_csv(
"D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv")
library(readr)
dados <- read_csv(
"D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv")
dados <- read_csv(
"D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv", sep = ",")
library(readr)
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
View(grupo4)
library(readr)
# Qual a dimensão do data frame?
dim(dados)
# separado apenas o x do data frame
sin <- dados$x #sin = sinistros(x)
head(sin)
## Analise do data frame:
# Importação dos dados:
library(readr)
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
head(grupo4)
# Qual a dimensão do data frame?
dim(dados)
# separado apenas o x do data frame
sin <- dados$x #sin = sinistros(x)
head(sin)
#Pacotes
library(readr)
#Pacotes
library(readr)
# Importação dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
head(grupo4)
# Qual a dimensão do data frame?
dim(grupo4)
# separado apenas o x do data frame
sin <- grupo4$x #sin = sinistros(x)
head(sin)
#Pacotes
library(readr)
# Importação dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
head(grupo4)
# Qual a dimensão do data frame?
dim(grupo4)
# separado apenas o x do data frame
sin <- grupo4$x #sin = sinistros(x)
head(sin)
summary(sin)
sin_variancia <- var(sin); sin_variancia
sin_desvio <- sqrt(var(sin)); sin_desvio
sin_coevar <- mean(sin)/sin_desvio ; sin_coevar
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = seq(1258, 27769))
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = seq(1258, 27769))
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = seq(1000, 1258, 27769))
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = seq(1, 1258, 27769))
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 1
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 1)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 10)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 100)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 1000)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 25)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 50)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 50)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 60)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 100)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 90)
sin_desvio <- sd(sin)
#Pacotes
library(readr)
# Importação dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
head(grupo4)
# Qual a dimensão do data frame?
dim(grupo4)
# separado apenas o x do data frame
sin <- grupo4$x #sin = sinistros(x)
head(sin)
summary(sin)
sin_variancia <- var(sin); sin_variancia
sin_desvio <- sd(sin)
sin_coevar <- mean(sin)/sin_desvio ; sin_coevar
summary(sin)
sin_variancia <- var(sin); sin_variancia
sin_desvio <- sd(sin)
sin_desvio <- sd(sin); sin_desvio
sin_coefvar <- mean(sin)/sin_desvio ; sin_coefvar
library(fitdistrplus)
sin<- sinistro
library(fitdistrplus)
sinistro <- read.csv("sinistros.csv", header = TRUE, sep=",")
sin<- sinistro
head(sinistro)
head(sinistro)
sinistro <- sinistro$x
library(fitdistrplus)
sinistro <- read.csv("sinistros.csv", header = TRUE, sep=",")
head(sinistro)
sinistro <- sinistro$x
# summary
summary(sinistro)
# desvio padrão
sd(sinistro)
# histograma
hist(sinistro)
descdist(sinistro)
## Terceira Avaliação
#Pacotes
library(readr)
# Importação dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
head(grupo4)
# Qual a dimensão do data frame?
dim(grupo4)
# separado apenas o x do data frame
sin <- grupo4$x #sin = sinistros(x)
head(sin)
summary(sin) # estatísticas descritivas
sin_variancia <- var(sin); sin_variancia # variância
sin_desvio <- sd(sin); sin_desvio # desvio
sin_coefvar <- mean(sin)/sin_desvio ; sin_coefvar # coeficiente de variação dos sinistros
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 90)
#ajustes da distribuição
descdist(sin)
fit <- fitdist(sinistro, "gamma")
library(fitdistrplus)
sinistro <- read.csv("sinistros.csv", header = TRUE, sep=",")
head(sinistro)
sinistro <- sinistro$x
# summary
summary(sinistro)
# desvio padrão
sd(sinistro)
# histograma
hist(sinistro)
descdist(sinistro)
fit <- fitdist(sinistro, "gamma")
fitw <- fitdist(sinistro, "weibull")
fitln <- fitdist(sinistro, "lnorm")
hist(sinistro, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dgamma(x, fit$estimate[1], fit$estimate[2]), add = TRUE, col = "green")
curve(dweibull(x, fitw$estimate[1], fitw$estimate[2]), add = TRUE, col = "red")
curve(dlnorm(x, fitln$estimate[1], fitln$estimate[2]), add = TRUE, col = "blue")
plotdist(sinistro, histo = TRUE, demp = TRUE)
fit_w  <- fitdist(sinistro, "weibull")
fit_g  <- fitdist(sinistro, "gamma")
fit_ln <- fitdist(sinistro, "lnorm")
par(mfrow=c(2,2))
plot.legend <- c("Weibull", "Gamma", "Lognormal")
denscomp(list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
cdfcomp (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
qqcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
ppcomp  (list(fit_w, fit_g, fit_ln), legendtext = plot.legend)
library(actuar)
fit_ll <- fitdist(sinistro, "llogis", start = list(shape = 1, scale = 500))
fit_P  <- fitdist(sinistro, "pareto", start = list(shape = 1, scale = 500))
summary(fit_ll)
summary(fit_P)
par(mfrow=c(2,2))
plot.legend <- c("gamma", "weibull", "loglogistic", "Pareto")
denscomp(list(fit_g,fit_w, fit_ll, fit_P), legendtext = plot.legend)
cdfcomp (list(fit_g,fit_w, fit_ll, fit_P), legendtext = plot.legend)
qqcomp  (list(fit_g,fit_w, fit_ll, fit_P), legendtext = plot.legend)
ppcomp  (list(fit_g,fit_w, fit_ll, fit_P), legendtext = plot.legend)
gofstat(list(fit_w, fit_g, fit_ln, fit_ll, fit_P), fitnames = c("Weibull","Gamma","LogNormal", "Loglogística", "Pareto"))
fit_n <- fitdist(sinistro, "normal")
fit_g <- fitdist(sinistro, "gamma")
fit_ln <- fitdist(sinistro, "lnorm")
fit_w <- fitdist(sinistro, "weibull")
fit_p <- fitdist(sinistro, "pareto")
fit_n <- fitdist(sinistro, "normal")
fit_n <- fitdist(sinistro, "dnormal")
fit_n <- fitdist(sinistro, "norm")
fit_g <- fitdist(sinistro, "gamma")
fit_ln <- fitdist(sinistro, "lnorm")
fit_w <- fitdist(sinistro, "weibull")
fit_p <- fitdist(sinistro, "pareto")
fit_p  <- fitdist(sinistro, "pareto", start = list(shape = 1, scale = 500))
View(fit_n)
# Paramêtros de cada distribuição
summary(fit_n)
summary(fit_n)
summary(fit_g)
summary(fit_ln)
summary(fit_w)
summary(fit_p)
## Terceira Avaliação
#Pacotes
library(readr)
## Analise do data frame:
# Importação dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
head(grupo4)
# Qual a dimensão do data frame?
dim(grupo4)
# separado apenas o x do data frame
sin <- grupo4$x #sin = sinistros(x)
head(sin)
# 1.
# a)
summary(sin) # estatísticas descritivas
sin_variancia <- var(sin); sin_variancia # variância
sin_desvio <- sd(sin); sin_desvio # desvio
sin_coefvar <- mean(sin)/sin_desvio ; sin_coefvar # coeficiente de variação dos sinistros
# b)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 90)
# c)
# ajustes da distribuição
descdist(sin)
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit_n <- fitdist(sinistro, "norm")
fit_g <- fitdist(sinistro, "gamma")
fit_ln <- fitdist(sinistro, "lnorm")
fit_w <- fitdist(sinistro, "weibull")
fit_p  <- fitdist(sinistro, "pareto", start = list(shape = 1, scale = 500))
# Paramêtros de cada distribuição
summary(fit_n)
summary(fit_g)
summary(fit_ln)
summary(fit_w)
summary(fit_p)
library(fitdistrplus)
# Importação dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
head(grupo4)
# Qual a dimensão do data frame?
dim(grupo4)
# separado apenas o x do data frame
sin <- grupo4$x #sin = sinistros(x)
head(sin)
summary(sin) # estatísticas descritivas
sin_variancia <- var(sin); sin_variancia # variância
sin_desvio <- sd(sin); sin_desvio # desvio
sin_coefvar <- mean(sin)/sin_desvio ; sin_coefvar # coeficiente de variação dos sinistros
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 90)
# ajustes da distribuição
descdist(sin)
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit_n <- fitdist(sinistro, "norm")
fit_g <- fitdist(sinistro, "gamma")
fit_ln <- fitdist(sinistro, "lnorm")
fit_n <- fitdist(sin, "norm")
fit_g <- fitdist(sin, "gamma")
fit_ln <- fitdist(sin, "lnorm")
fit_w <- fitdist(sin, "weibull")
fit_p  <- fitdist(sin, "pareto", start = list(shape = 1, scale = 500))
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit_n <- fitdist(sin, "norm")
fit_g <- fitdist(sin, "gamma")
fit_g <- fitdist(sin, "gamma")
fit_g <- fitdist(sin, "gamma", method = mme)
fit_g <- fitdist(sin, "gamma", method = mmo)
fit_g <- fitdist(sin, "gamma", method = mme)
fit_g <- fitdist(sin, "gamma", method = mle)
library(fitdistrplus)
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit_n <- fitdist(sin, "norm")
fit_g <- fitdist(sin, "gamma", method = mle)
fit_g <- fitdist(sin, "gamma", method = c(mle)
fit_g <- fitdist(sin, "gamma", method = c(mle))
fit_g <- fitdist(sin, "gamma", method = c(mme))
fit_g <- fitdist(sin, "gamma", method = "mme")
fit_g <- fitdist(sin, "gamma", method = "mle")
fit_n <- fitdist(sin, "norm")
fit_g <- fitdist(sin, "gamma", method = "mme")
fit_ln <- fitdist(sin, "lnorm")
fit_w <- fitdist(sin, "weibull")
fit_p  <- fitdist(sin, "pareto", method ="mle")
library(readr)
library(fitdistrplus)
# ajustes da distribuição
descdist(sin)
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit_n <- fitdist(sin, "norm")
fit_g <- fitdist(sin, "gamma", method = "mme")
fit_ln <- fitdist(sin, "lnorm")
fit_w <- fitdist(sin, "weibull")
fit_p  <- fitdist(sin, "pareto", method ="mle")
# Paramêtros de cada distribuição
summary(fit_n)
fit_p  <- fitdist(sin, "pareto", method ="mle")
fit_P  <- fitdist(sinistro, "pareto", start = list(shape = 1, scale = 500))
fit_p  <- fitdist(sinistro, "pareto", start = list(shape = 1, scale = 500))
fit_p  <- fitdist(sin, "pareto", start = list(shape = 1, scale = 500))
fit_p  <- fitdist(sin, "dpareto", start = list(shape = 1, scale = 500))
fit_p  <- fitdist(sin, "pareto", start=list(shape = 1, scale = 500))
fp <- fitdist(dataPar, "pareto", start=list(shape = 1, scale = 500))
fp <- fitdist(sin, "pareto", start=list(shape = 1, scale = 500))
library("MASS")
fp <- fitdist(sin, "pareto", start=list(shape = 1, scale = 500))
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit_n <- fitdist(sin, "norm")
fit_g <- fitdist(sin, "gamma", method = "mme")
fit_ln <- fitdist(sin, "lnorm")
fit_w <- fitdist(sin, "weibull")
fp <- fitdist(sin, "pareto", start=list(shape = 1, scale = 500))
fp <- fitdist(sin, "pareto", start=list(lambda = 1, theta.ml(500))
fp <- fitdist(sin, "pareto", start=list(lambda = 1, theta.ml(500))
fp <- fitdist(sin, "pareto", start=list(lambda = 1, theta.ml(500))
fp <- fitdist(sin, "pareto", start=list(lambda = 1, theta.ml(500)))
fp <- fitdist(sin, "pareto", start=list(lambda = 1, theta.mm(500)))
fp <- fitdist(sin, "pareto")
fp <- fitdist(sin, "pareto")
library(readr)
library(fitdistrplus)
library(MASS)
fp <- fitdist(sin, "pareto")
fp <- fitdist(sin, "pareto", method = mme)
fp <- fitdist(sin, "pareto", method = "mme")
fit_g <- fitdist(sin, "gamma", method = "mme")
fp <- fitdist(sin, "pareto", method = "mme")
fit.gamma <- fitdist(temp, distr = "gamma", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1))
fit.gamma <- fitdist(sin, distr = "gamma", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1))
fit.gamma
fit_g
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1))
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 500))
source('D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/R/Script_Teste.R', encoding = 'UTF-8')
source('D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/R/Script_Teste.R', encoding = 'UTF-8')
source('D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/R/Script_Teste.R', encoding = 'UTF-8')
source('D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/R/Script_Teste.R', encoding = 'UTF-8')
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit.normal <- fitdist(sin, "norm")
# Importação£o dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
library(readr)
library(fitdistrplus)
library(MASS)
# Importação£o dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
# Importação£o dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
# separado apenas o x do data frame
sin <- grupo4$x #sin = sinistros(x)
# ajustes da distribuição
descdist(sin)
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit.normal <- fitdist(sin, "norm")
fit.gamma <- fitdist(sin, distr = "gamma", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1))
fit.lognormal <- fitdist(sin, "lnorm")
fit.weibull <- fitdist(sin, "weibull")
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 500))
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", lower = c(0, 0), start = list(scale = 0, shape = 0))
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1))
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", lower = c(0, 1), start = list(scale = 1, shape = 1))
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", lower = c(0, 100), start = list(scale = 1, shape = 1))
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 3))
fit.pareto <- fitdist(sin, distr = "pareto", method = "mle", start = list(scale = 1, shape = 3))
fit_P  <- fitdist(my_data, "pareto", start = list(shape = 1, scale = 500))
fit_P  <- fitdist(sin, "pareto", start = list(shape = 1, scale = 500))
fit_P  <- fitdist(sin, "pareto", lower =c(0,0), start = list(shape = 1, scale = 500))
fit_P  <- fitdist(sin, "pareto", lower =c(0,0), start = list(shape = 5, scale = 2))
fit_P  <- fitdist(sin, "pareto", lower =c(1,2)
fit_P  <- fitdist(sin, "pareto", lower =c(1,2))
fit_P <- fitdist(sin, "pareto", lower =c(1,2))
library(actuar)
fit_P  <- fitdist(sin, "pareto", lower =c(0,0), start = list(shape = 1, scale = 500))
fit_P  <- fitdist(sin, "pareto", lower =c(0,0), start = list(shape = 1, scale = 500))
fit_P  <- fitdist(sin, "pareto", start = list(shape = 1, scale = 500))
fit_P
a distribuição
summary(fit.normal)
summary(fit.gamma)
summary(fit.lognormal)
summary(fit.weibull)
summary(fit.pareto)
fit.pareto  <- fitdist(sin, "pareto", method = "mle", lower =c(0,0), start = list(shape = 1, scale = 500)) # Precisa do pacote actuar
summary(fit.pareto)
fit.pareto  <- fitdist(sin, "pareto", method = "mle", lower =c(0,0), start = list(shape = 1, scale = 500)) # Precisa do pacote actuar
fit.pareto  <- fitdist(sin, "pareto", lower =c(0,0), start = list(shape = 1, scale = 500)) # Precisa do pacote actuar
library(readr)
library(fitdistrplus)
library(MASS)
library(actuar)
# Importação£o dos dados:
grupo4 <- read_csv("D:/Google Drive/6 - R/5- Estágio 2 - Prova da 3º Unidade/Dados/grupo4.csv",
col_types = cols(n = col_number(), x = col_number()))
head(grupo4)
# Qual a dimensãoo do data frame?
dim(grupo4)
# separado apenas o x do data frame
sin <- grupo4$x #sin = sinistros(x)
head(sin)
# 1.
# a)
summary(sin) # estatísticas descritivas
sin_variancia <- var(sin); sin_variancia # variância
sin_desvio <- sd(sin); sin_desvio # desvio
sin_coefvar <- mean(sin)/sin_desvio ; sin_coefvar # coeficiente de variação dos sinistros
# b)
hist(sin, main = "Histograma dos sinistros", xlab = "Valores dos sinistros", ylab = "Frequência", breaks = 90)
# c)
# ajustes da distribuição
descdist(sin)
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto
fit.normal <- fitdist(sin, "norm")
fit.gamma <- fitdist(sin, distr = "gamma", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1)) # Precisa do pacote actuar
fit.lognormal <- fitdist(sin, "lnorm")
fit.weibull <- fitdist(sin, "weibull")
fit.pareto  <- fitdist(sin, "pareto", lower =c(0,0), start = list(shape = 1, scale = 500)) # Precisa do pacote actuar
fit.pareto  <- fitdist(sin, "pareto", start = list(shape = 1, scale = 500)) # Precisa do pacote actuar
summary(fit.normal)
summary(fit.gamma)
summary(fit.lognormal)
summary(fit.weibull)
summary(fit.pareto)
hist(sin, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dnorm(x, fit.normal$estimate[1], fit.normal$estimate[2]), add = TRUE, col = "")
curve(dgamma(x, fit.gamma$estimate[1], fit.gamma$estimate[2]), add = TRUE, col = "")
curve(dlnorm(x, fit.lognormal$estimate[1], fit.lognormal$estimate[2]), add = TRUE, col = "")
curve(dweibull(x, fit.weibull$estimate[1], fit.weibull$estimate[2]), add = TRUE, col = "")
curve(dpareto(x, fit.pareto$estimate[1], fit.pareto$estimate[2]), add = TRUE, col = "")
hist(sin, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dnorm(x, fit.normal$estimate[1], fit.normal$estimate[2]), add = TRUE, col = "1")
curve(dgamma(x, fit.gamma$estimate[1], fit.gamma$estimate[2]), add = TRUE, col = "2")
curve(dlnorm(x, fit.lognormal$estimate[1], fit.lognormal$estimate[2]), add = TRUE, col = "3")
curve(dweibull(x, fit.weibull$estimate[1], fit.weibull$estimate[2]), add = TRUE, col = "4")
curve(dpareto(x, fit.pareto$estimate[1], fit.pareto$estimate[2]), add = TRUE, col = "5")
hist(sin, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dnorm(x, fit.normal$estimate[1], fit.normal$estimate[2]), add = TRUE, col = "purple")
curve(dgamma(x, fit.gamma$estimate[1], fit.gamma$estimate[2]), add = TRUE, col = "blue")
curve(dlnorm(x, fit.lognormal$estimate[1], fit.lognormal$estimate[2]), add = TRUE, col = "red")
curve(dweibull(x, fit.weibull$estimate[1], fit.weibull$estimate[2]), add = TRUE, col = "orange")
curve(dpareto(x, fit.pareto$estimate[1], fit.pareto$estimate[2]), add = TRUE, col = "green")
hist(sin, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dnorm(x, fit.normal$estimate[1], fit.normal$estimate[2]), add = TRUE, col = "purple")
curve(dgamma(x, fit.gamma$estimate[1], fit.gamma$estimate[2]), add = TRUE, col = "blue")
curve(dlnorm(x, fit.lognormal$estimate[1], fit.lognormal$estimate[2]), add = TRUE, col = "red")
curve(dweibull(x, fit.weibull$estimate[1], fit.weibull$estimate[2]), add = TRUE, col = "orange")
curve(dpareto(x, fit.pareto$estimate[1], fit.pareto$estimate[2]), add = TRUE, col = "green")
curve(dpareto(x, fit.pareto$estimate[1], fit.pareto$estimate[2]), add = TRUE, col = "green")
library(actuar)
curve(dpareto(x, fit.pareto$estimate[1], fit.pareto$estimate[2]), add = TRUE, col = "green")
hist(sin, pch=20, breaks = 20, prob = TRUE, main = "")
curve(dnorm(x, fit.normal$estimate[1], fit.normal$estimate[2]), add = TRUE, col = "purple")
curve(dgamma(x, fit.gamma$estimate[1], fit.gamma$estimate[2]), add = TRUE, col = "blue")
curve(dlnorm(x, fit.lognormal$estimate[1], fit.lognormal$estimate[2]), add = TRUE, col = "red")
curve(dweibull(x, fit.weibull$estimate[1], fit.weibull$estimate[2]), add = TRUE, col = "orange")
curve(dpareto(x, fit.pareto$estimate[1], fit.pareto$estimate[2]), add = TRUE, col = "green")
par(mfrow=c(2,2))
plot.legend <- c("Normal", "Gamma", "Lognormal", "Weibull", "Pareto")
denscomp(list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
cdfcomp (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
qqcomp  (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
ppcomp  (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
par(mfrow=c(2,2))
plot.legend <- c("Normal", "Gamma", "Lognormal", "Weibull", "Pareto")
denscomp(list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
library(readr)
library(fitdistrplus)
library(MASS)
library(actuar)
plotdist(sin, histo = TRUE, demp = TRUE)
par(mfrow=c(2,2))
plot.legend <- c("Normal", "Gamma", "Lognormal", "Weibull", "Pareto")
denscomp(list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
cdfcomp (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
qqcomp  (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
ppcomp  (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
par(mfrow=c(2,2))
plot.legend <- c("Normal", "Gamma", "Lognormal", "Weibull", "Pareto")
denscomp(list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
par(mfrow=c(2,2))
plot.legend <- c("Normal", "Gamma", "Lognormal", "Weibull", "Pareto")
denscomp(list(fit.normal, fit.gamma, ), legendtext = plot.legend)
par(mfrow=c(2,2))
plot.legend <- c("Normal", "Gamma", "Lognormal", "Weibull", "Pareto")
denscomp(list(fit.normal, fit.gamma ), legendtext = plot.legend)
cdfcomp (list(fit.normal, fit.gamma), legendtext = plot.legend)
qqcomp  (list(fit.normal, fit.gamma), legendtext = plot.legend)
ppcomp  (list(fit.normal, fit.gamma), legendtext = plot.legend)
fit.lognormal, fit.weibull, fit.pareto
par(mfrow=c(2,2))
plot.legend <- c("Normal", "Gamma", "Lognormal", "Weibull", "Pareto")
denscomp(list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
cdfcomp (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
qqcomp  (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
ppcomp  (list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), legendtext = plot.legend)
gofstat(list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), fitnames = c("Weibull","Gamma","LogNormal", "Loglogística", "Pareto"))
gofstat(list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), fitnames = c("Weibull","Gamma","LogNormal", "Loglogística", "Pareto"))
gofstat(list(fit.normal, fit.gamma, fit.lognormal, fit.weibull, fit.pareto), fitnames = c("Normal", "Gamma", "Lognormal", "Weibull", "Pareto"))
# ajustes da distribuição:
descdist(sin)
# Estimando os parâmetros para normal,gamma,lognormal,weibull e pareto:
# Gamma e Pareto precisam do pacote actuar
fit.normal <- fitdist(sin, "norm")
fit.gamma <- fitdist(sin, distr = "gamma", method = "mle", lower = c(0, 0), start = list(scale = 1, shape = 1))
fit.lognormal <- fitdist(sin, "lnorm")
fit.weibull <- fitdist(sin, "weibull")
fit.pareto  <- fitdist(sin, "pareto", start = list(shape = 1, scale = 500))
# Parâmetros de cada distribuição:
summary(fit.normal)
summary(fit.gamma)
summary(fit.lognormal)
summary(fit.weibull)
summary(fit.pareto)
