bty='l',
col='blue')
grid(col='darkgrey', lwd=2)
knitr::opts_chunk$set(echo = TRUE)
dados <- read.delim("D:/Google Drive/2 - Ufpb/P5/Econometria/Cap4/Projeto/Cap4/Dados/dados.txt")
dados
yt<- ts(dados$Folha, frequency = 12, start = c(1959, 1));yt
plot(yt,
ylab='preço',las=1,
xlab='Ano',
main='Gráfico do preço da cesta básica em São Paulo',
bty='l',
col='black')
grid(col='darkgrey', lwd=2)
summary(lm(diff(yt)~lag(yt,-1)[-length(yt)] - 1))
require(urca)
summary(ur.df(yt, type='none', lags=0))
dyt <- diff(yt)
summary(ur.df(dyt, type='none', lags=0))
plot(dyt,
ylab=expression(dyt),
main='',
bty='l',
col='black')
grid(col='darkgrey', lwd=2)
ytanalise = ts(cumsum(rnorm(200)), end=c(2020,12), freq=12)
plot(ytanalise)
grid(col='darkgrey', lwd=2)
#'
#' This function will read a standard R markdown source file and convert it to
#' an R script to allow the code to be run using the "source" function.
#'
#' The function is quite simplisting in that it reads a .Rmd file and adds
#' comments to non-r code sections, while leaving R code without comments
#' so that the interpreter can run the commands.
#'
#'
rmd2rscript <- function(infile){
# read the file
flIn <- readLines(infile)
# identify the start of code blocks
cdStrt <- which(grepl(flIn, pattern = "```{r*", perl = TRUE))
# identify the end of code blocks
cdEnd <- sapply(cdStrt, function(x){
preidx <- which(grepl(flIn[-(1:x)], pattern = "```", perl = TRUE))[1]
return(preidx + x)
})
# define an expansion function
# strip code block indacators
flIn[c(cdStrt, cdEnd)] <- ""
expFun <- function(strt, End){
strt <- strt+1
End <- End-1
return(strt:End)
}
idx <- unlist(mapply(FUN = expFun, strt = cdStrt, End = cdEnd,
SIMPLIFY = FALSE))
# add comments to all lines except code blocks
comIdx <- 1:length(flIn)
comIdx <- comIdx[-idx]
for(i in comIdx){
flIn[i] <- paste("#' ", flIn[i], sep = "")
}
# create an output file
nm <- strsplit(infile, split = "\\.")[[1]][1]
flOut <- file(paste(nm, "[rmd2r].R", sep = ""), "w")
for(i in 1:length(flIn)){
cat(flIn[i], "\n", file = flOut, sep = "\t")
}
close(flOut)
}
rmd2rscript <- function(infile)
flIn <- readLines(infile)
install.packages("roxygen2")
q()
library(roxygen2)
install.packages("devtools")
library(gtable)
library(het.test)
detach("package:het.test", unload = TRUE)
detach("package:gtable", unload = TRUE)
infile <- url('D:\Google Drive\2 - Ufpb\P5\Econometria\Series\Eco\Cap3.Rmd')
output <- backstitch(infile, output_type = 'script', chunk_header = "#+")
cat("```r", output, "```", sep = "\n")
infile <- url('D:/Google Drive/2 - Ufpb/P5/Econometria/Series/Eco/Cap3.Rmd')
output <- backstitch(infile, output_type = 'script', chunk_header = "#+")
cat("```r", output, "```", sep = "\n")
infile <- url('D:/Google Drive/2 - Ufpb/P5/Econometria/Series/Eco/Cap3.Rmd')
infile <- ('D:/Google Drive/2 - Ufpb/P5/Econometria/Series/Eco/Cap3.Rmd')
output <- backstitch(infile, output_type = 'script', chunk_header = "#+")
cat("```r", output, "```", sep = "\n")
devtools::source_gist('284671997992aefe295bed34bb53fde6', filename = 'backstitch.R')
devtools::source_gist('284671997992aefe295bed34bb53fde6', filename = 'backstitch.R')
install.packages("devtools")
install.packages("devtools")
setwd("D:/Google Drive/2 - Ufpb/P5/Econometria/Cap4")
plot(stl(log(pib), "per"))
#http://www.face.ufg.br/siteface_files/midias/original-nt-002.pdf
pib<-read.delim2("D:/Google Drive/2 - Ufpb/P5/Econometria/Cap4/Dados/pib.txt")
pib
dados<-pib
pib<-ts(dados[,2],start=1990,freq=12)
attach(dados)
names (dados)
# Primeira diferença da série vendas
diff(pib)
#logaritmo da série vendas
log(pib)
#2.1 Gráfico da série vendas
plot.ts(pib)
plot.ts(diff(pib))
pib<-ts(dados[,2],start=1990,freq=12)
#2.2. Para fazer a análise da Função de Autocorrelação (FAC) e Autocorrelação parcial (FACp) com defasagem 36:
acf(pib, lag.max=36)
pacf(pib, lag.max=36)
acf(diff(pib), lag.max=36)
pacf(diff(pib), lag.max=36)
#Agora usando o comando decompose(), se decompõe a série em seus componentes tendência, aleatório, e sazonal.
x<- decompose(pib)
plot(x)
#2.4. Estimando o modelo ARIMA com comando:
#Comando geral: arima(data,order=c(p,d,q))
arima(pib,order=c(2,1,1))
x.fit <- arima(pib,order=c(2,1,1))
#2.5. Estimando o modelo ARIMA sazonal
arima(pib,order=c(2,1,1),seasonal=list(order=c(2,1,1),period=12))
y.fit<-arima(pib,order=c(2,1,1),seasonal=list(order=c(2,1,1),period=12))
y.fit
#2.6. Checagem e diagnóstico
#Com o comando tsdiag é possível analisar os gráficos dos resíduos ( O modelo deve apresentar os resíduos estacionários, com média zero e variância constante)
#lembre-se que o modelo ARIMA(2,1,1) foi chamado de x
z<-arima(pib,order=c(2,1,1),seasonal=list(order=c(2,1,1),period=12))
tsdiag(z)
#Análise da estatística de Box–Pierce (e Ljung–Box)
Box.test(z$residuals,lag=1)
#2.7. Previsão usando o modelo ( Forecasting)
#Use o comando predict()
#O termo n.ahead= 4, mostra quatro passos a frente e lembre-se que x é o nosso modelo ARIMA(2,1,1). Se você digitar forecast no R e der enter, irá aparecer os 4 dados previstos.
require(forecast)
forecast<-predict(z,n.ahead=10)
#2.8. Gráfico dos resultados
#Para fazer um gráfico com os valores mínimos e máximos das escalas das coordenadas e das abscissas, primeiramente deve-se encontrar esses valores com o comando summary.
summary (pib)
#Lembre-se para fazer o gráfico deve-se aumentar o valor máximo e também o tempo deve ser alterado, já considerando a previsão dos passos a frente.
# Como o dados do pib começam em 1990 e acabam em 2019, então como vamos prever 4 anos fica de 1990-2023.
plot(pib,xlim=c(1994,2020),ylim=c(0, 500))
#previsão de 4 meses
previsao <- predict(x.fit,n.ahead=4)
plot(previsao$pred)
#2.9. Gráfico usando o comando:
require(forecast)
previsao <- forecast (x.fit)
plot(forecast(x.fit))
#2.3. Sazonalidade pode ser detectada pelo comando (stl):
# Decomposição da série temporal em tendência, sazonalidade e resto (componente irregular)
plot(stl(log(pib), "per"))
#2.3. Sazonalidade pode ser detectada pelo comando (stl):
# Decomposição da série temporal em tendência, sazonalidade e resto (componente irregular)
plot(stl(log(pib), "per"))
plot(stllc <-(stl(log(pib), "per")))3
plot(stllc <-(stl(log(pib), "per")))
#http://www.face.ufg.br/siteface_files/midias/original-nt-002.pdf
pib<-read.delim2("D:/Google Drive/2 - Ufpb/P5/Econometria/Cap4/Dados/pib.txt")
pib
dados<-pib
pib<-ts(dados[,2],start=1990,freq=12)
attach(dados)
names (dados)
# Primeira diferença da série vendas
diff(pib)
#logaritmo da série vendas
log(pib)
#2.1 Gráfico da série vendas
plot.ts(pib)
plot.ts(diff(pib))
pib<-ts(dados[,2],start=1990,freq=12)
#2.2. Para fazer a análise da Função de Autocorrelação (FAC) e Autocorrelação parcial (FACp) com defasagem 36:
acf(pib, lag.max=36)
pacf(pib, lag.max=36)
acf(diff(pib), lag.max=36)
pacf(diff(pib), lag.max=36)
#Agora usando o comando decompose(), se decompõe a série em seus componentes tendência, aleatório, e sazonal.
x<- decompose(pib)
plot(x)
#2.4. Estimando o modelo ARIMA com comando:
#Comando geral: arima(data,order=c(p,d,q))
arima(pib,order=c(2,1,1))
x.fit <- arima(pib,order=c(2,1,1))
#2.5. Estimando o modelo ARIMA sazonal
arima(pib,order=c(2,1,1),seasonal=list(order=c(2,1,1),period=12))
y.fit<-arima(pib,order=c(2,1,1),seasonal=list(order=c(2,1,1),period=12))
y.fit
#2.6. Checagem e diagnóstico
#Com o comando tsdiag é possível analisar os gráficos dos resíduos ( O modelo deve apresentar os resíduos estacionários, com média zero e variância constante)
#lembre-se que o modelo ARIMA(2,1,1) foi chamado de x
z<-arima(pib,order=c(2,1,1),seasonal=list(order=c(2,1,1),period=12))
tsdiag(z)
#Análise da estatística de Box–Pierce (e Ljung–Box)
Box.test(z$residuals,lag=1)
#2.7. Previsão usando o modelo ( Forecasting)
#Use o comando predict()
#O termo n.ahead= 4, mostra quatro passos a frente e lembre-se que x é o nosso modelo ARIMA(2,1,1). Se você digitar forecast no R e der enter, irá aparecer os 4 dados previstos.
require(forecast)
forecast<-predict(z,n.ahead=10)
#2.8. Gráfico dos resultados
#Para fazer um gráfico com os valores mínimos e máximos das escalas das coordenadas e das abscissas, primeiramente deve-se encontrar esses valores com o comando summary.
summary (pib)
#Lembre-se para fazer o gráfico deve-se aumentar o valor máximo e também o tempo deve ser alterado, já considerando a previsão dos passos a frente.
# Como o dados do pib começam em 1990 e acabam em 2019, então como vamos prever 4 anos fica de 1990-2023.
plot(pib,xlim=c(1994,2020),ylim=c(0, 500))
#previsão de 4 meses
previsao <- predict(x.fit,n.ahead=4)
plot(previsao$pred)
#2.9. Gráfico usando o comando:
require(forecast)
previsao <- forecast (x.fit)
plot(forecast(x.fit))
reg.ipca <- arima(pib, order=c(1,0,0))
prev <- predict(reg.ipca, n.ahead=4)
knitr::opts_chunk$set(echo = TRUE)
yt <- AirPassengers
TT <- 200
ar1 <- acf(arima.sim(model=list(ar=0.9), n=TT),
ylab=expression(Y[t]),
main=expression(paste("AR(1) com ", theta, "=0.9")))
TT <- 200
ar1 <- pacf(arima.sim(model=list(ar=0.9), n=TT),
ylab=expression(Y[t]),
main=expression(paste("AR(1) com ", theta, "=0.9")))
plot(yt,
ylab=expression(yt),
main='',
bty='l',
col='blue')
grid(col='darkgrey', lwd=2)
summary(lm(diff(yt)~lag(yt,-1)[-length(yt)] - 1))
install.packages("urca")
require(urca)
summary(ur.df(yt, type='none', lags=0))
dyt <- diff(yt)
summary(ur.df(dyt, type='none', lags=0))
plot(dyt,
ylab=expression(dyt),
main='',
bty='l',
col='blue')
grid(col='darkgrey', lwd=2)
ytanalise = ts(cumsum(rnorm(200)), end=c(2020,12), freq=12)
plot(ytanalise)
grid(col='darkgrey', lwd=2)
set.seed(12)
t <- 200
y1 <- ts(cumsum(rnorm(t)))
y2 <- rnorm(t)
ts.plot(y1, y2,
ylab='', xlab='Tempo',
main='',
col=c('blue', 'red'),
lwd=2)
grid(col='darkgrey', lwd=2)
legend('bottom',c('Passeio aleatório','Ruído branco'),
lwd=2, col=c('blue','red'), bty='n')
PP.test(y1)
PP.test(y2)
#Esse ambiente era o que estava no livro, criei ele novamente logo abaixo e colocando o banco de dados airpassengers
y <- read.table('table17-2.txt', header=T)$PPDI
y<- AirPassengers
plot(y, col='blue', main='Renda disponível',
bty='l', xlab='Ano', ylab='$')
adf.y3 <- ur.df(y, type='trend', lags=3)
acf(adf.y3@res, ci.type='ma', main='ACF Resíduos - ADF com 3 defasagens',
xlab='Defasagem')
adf.y2 <- ur.df(y, type='trend', lags=2)
acf(adf.y2@res, ci.type='ma', main='ACF Resíduos - ADF com 2 defasagens',
xlab='Defasagem')
adf.y3 <- ur.df(y, type='trend', lags=3)
acf(adf.y3@res, ci.type='ma', main='ACF Resíduos - ADF com 3 defasagens',
xlab='Defasagem')
adf.y2 <- ur.df(y, type='trend', lags=2)
acf(adf.y2@res, ci.type='ma', main='ACF Resíduos - ADF com 2 defasagens',
xlab='Defasagem')
adf.y0 <- ur.df(y, type='trend', lags=0)
acf(adf.y0@res, ci.type='ma', main='ACF Resíduos - ADF sem defasagem',
xlab='Defasagem')
summary(adf.y3)
summary(adf.y2)
summary(adf.y0)
adfd.y <- ur.df(y, type='drift', lags=0)
summary(adfd.y)
adfd.y <- ur.df(y, type='drift', lags=0)
summary(adfd.y)
adfd.y <- ur.df(y, type='drift', lags=0)
summary(adfd.y)
adfd.y <- ur.df(y, type='drift', lags=0)
adfd.y <- ur.df(y, type='drift', lags=0)
summary(adfd.y)
adf6 <- ur.df(y, type='drift', lags=6)
acf(adf6@res, ci.type='ma',
main='Resíduos de teste ADF - 6 defasagens',
xlab='Defasagem')
summary(adf6)
par(mfrow=c(2,1))
acf(y, ci.type='ma', main='IPCA (variação mensal)')
pacf(y, main='')
#Pacotes necessarios  para contiuar
install.packages("lmtest")
require("lmtest")
coeftest(arima(y, order=c(2,0,2)))
coeftest(arima(y, order=c(2,0,1)))
coeftest(arima(y, order=c(1,0,1)))
coeftest(arima(y, order=c(1,0,0)))
require("forecast")
require("FinTS")
Box.test(x = fit.air$residuals, lag = 6,
type = "Ljung-Box", fitdf = 1)
fit.air<-arima(pib,order=c(2,1,1),seasonal=list(order=c(2,1,1),period=12))
tsdiag(fit.air)
Box.test(x = fit.air$residuals, lag = 6,
type = "Ljung-Box", fitdf = 1)
par(mfrow=c(1,2))
acf(resid(reg.ipca), main='Resíduos ARMA(1,0)', ci.type='ma')
pacf(resid(reg.ipca), main='Resíduos ARMA(1,0)')
reg.ipca <- arima(pib, order=c(1,0,0))
reg.ipca <- arima(pib, order=c(1,0,0))
plot(reg.ipca)
prev <- predict(reg.ipca, n.ahead=4)
par(mfrow=c(1,2))
acf(resid(reg.ipca), main='Resíduos ARMA(1,0)', ci.type='ma')
pacf(resid(reg.ipca), main='Resíduos ARMA(1,0)')
Box.test(resid(reg.ipca), lag=7, type='Ljung-Box', fitdf=1)
monthplot(ipca, col='darkblue', col.base='red',
main='IPCA por mês e IPCA médio por mês',
ylab='IPCA (%)', lty.base=2)
monthplot(pib, col='darkblue', col.base='red',
main='IPCA por mês e IPCA médio por mês',
ylab='IPCA (%)', lty.base=2)
ljung.n <- function(dados, lag.final,fitdf=1)
pvalores <- matrix(NA, nrow=lag.final, ncol=1)
for (i in 1:lag.final)
pvalores[i] <- Box.test(dados, fitdf=fitdf, lag=i)$p.value
ljung.n <- function(dados, lag.final,fitdf=1)
pvalores <- matrix(NA, nrow=lag.final, ncol=1)
pvalores[i] <- Box.test(dados, fitdf=fitdf, lag=i)$p.value
ljung.n <- function(dados, lag.final,fitdf=1)
pvalores <- matrix(NA, nrow=lag.final, ncol=1)
pvalores[i] <- Box.test(resid(reg.ipca), lag=7, type='Ljung-Box', fitdf=1)$p.value
pvalores<- Box.test(resid(reg.ipca), lag=7, type='Ljung-Box', fitdf=1)$p.value
ljung.n <- function(dados, lag.final,fitdf=1)
pvalores <- matrix(NA, nrow=lag.final, ncol=1)
pvalores<- Box.test(resid(reg.ipca), lag=7, type='Ljung-Box', fitdf=1)$p.value
return(pvalores)
pvaores
pvalores
shapiro.test(resid(reg.ipca))
AIC(reg.ipca)
AIC(update(reg.ipca, order=c(0,0,1)))
AIC(update(reg.ipca, order=c(1,0,1)))
AIC(update(reg.ipca, order=c(2,0,2)))
prev <- predict(reg.ipca, n.ahead=4)
par(mfrow=c(1,2))
ts.plot(window(ipca, start=2013),
prev$pred,
prev$pred+1.96*prev$se,
prev$pred-1.96*prev$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
ts.plot(window(pib, start=2013),
prev$pred,
prev$pred+1.96*prev$se,
prev$pred-1.96*prev$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
plot(window(pib, start=2013),
xlim=c(2013, 2015.2),
col='darkblue', lwd=2, bty='l', ylab='IPCA',
main='Previsão IPCA - Modelo AR(1)')
par(mfrow=c(1,2))
ts.plot(window(pib, start=2013),
prev$pred,
prev$pred+1.96*prev$se,
prev$pred-1.96*prev$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
plot(window(pib, start=2013),
xlim=c(2013, 2015.2),
col='darkblue', lwd=2, bty='l', ylab='IPCA',
main='Previsão IPCA - Modelo AR(1)')
lines(ts(c(ipca[length(ipca)],prev$pred), start=c(2014,10), freq=12),
col='red', lwd=2)
lines(ts(c(ipca[length(pib)],prev$pred), start=c(2014,10), freq=12),
col='red', lwd=2)
par(mfrow=c(1,2))
ts.plot(window(pib, start=2013),
prev$pred,
prev$pred+1.96*prev$se,
prev$pred-1.96*prev$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
plot(window(pib, start=2013),
xlim=c(2013, 2015.2),
col='darkblue', lwd=2, bty='l', ylab='IPCA',
main='Previsão IPCA - Modelo AR(1)')
lines(ts(c(ipca[length(pib)],prev$pred), start=c(2014,10), freq=12),
col='red', lwd=2)
par(mfrow=c(1,2))
ts.plot(window(pib, start=2013),
prev$pred,
prev$pred+1.96*prev$se,
prev$pred-1.96*prev$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
plot(window(pib, start=2013),
xlim=c(2013, 2015.2),
col='darkblue', lwd=2, bty='l', ylab='IPCA',
main='Previsão IPCA - Modelo AR(1)')
lines(ts(c(pib[length(pib)],prev$pred), start=c(2014,10), freq=12),
col='red', lwd=2)
lines(ts(c(ipca[length(ipca)],prev$pred+1.96*prev$se),
start=c(2014,10), freq=12),
col='darkred', lwd=2, lty=2)
par(mfrow=c(1,2))
ts.plot(window(pib, start=2013),
prev$pred,
prev$pred+1.96*prev$se,
prev$pred-1.96*prev$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
plot(window(pib, start=2013),
xlim=c(2013, 2015.2),
col='darkblue', lwd=2, bty='l', ylab='IPCA',
main='Previsão IPCA - Modelo AR(1)')
lines(ts(c(pib[length(pib)],prev$pred), start=c(2014,10), freq=12),
col='red', lwd=2)
lines(ts(c(pib[length(pib)],prev$pred+1.96*prev$se),
start=c(2014,10), freq=12),
col='darkred', lwd=2, lty=2)
lines(ts(c(ipca[length(ipca)],prev$pred-1.96*prev$se),
start=c(2014,10), freq=12),
col='darkred', lwd=2, lty=2)
par(mfrow=c(1,2))
ts.plot(window(pib, start=2013),
prev$pred,
prev$pred+1.96*prev$se,
prev$pred-1.96*prev$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
plot(window(pib, start=2013),
xlim=c(2013, 2015.2),
col='darkblue', lwd=2, bty='l', ylab='IPCA',
main='Previsão IPCA - Modelo AR(1)')
lines(ts(c(pib[length(pib)],prev$pred), start=c(2014,10), freq=12),
col='red', lwd=2)
lines(ts(c(pib[length(pib)],prev$pred+1.96*prev$se),
start=c(2014,10), freq=12),
col='darkred', lwd=2, lty=2)
lines(ts(c(pib[length(pib)],prev$pred-1.96*prev$se),
start=c(2014,10), freq=12),
col='darkred', lwd=2, lty=2)
ipca.b <- window(ipca, end=c(2014, 06))
ipca.b <- window(pib, end=c(2014, 06))
reg.ipca.b <- arima(ipca.b, order=c(1,0,0))
prev2 <- predict(reg.ipca.b, n.ahead=4)
ipca.b <- window(pib, end=c(2014, 06))
reg.ipca.b <- arima(ipca.b, order=c(1,0,0))
prev2 <- predict(reg.ipca.b, n.ahead=4)
par(mfrow=c(1,2))
ts.plot(window(ipca, start=2013),
prev2$pred,
prev2$pred+1.96*prev2$se,
prev2$pred-1.96*prev2$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
par(mfrow=c(1,2))
ts.plot(window(pib, start=2013),
prev2$pred,
prev2$pred+1.96*prev2$se,
prev2$pred-1.96*prev2$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
plot(window(ipca, start=2013),
col='darkblue', lwd=2, bty='l', ylab='IPCA',
main='Previsão IPCA - Modelo AR(1)')
par(mfrow=c(1,2))
ts.plot(window(pib, start=2013),
prev2$pred,
prev2$pred+1.96*prev2$se,
prev2$pred-1.96*prev2$se,
col=c(1,2,2,2), lty=c(1,1,2,2))
plot(window(pib, start=2013),
col='darkblue', lwd=2, bty='l', ylab='IPCA',
main='Previsão IPCA - Modelo AR(1)')
lines(ts(prev2$pred, start=c(2014,07), freq=12),
col='red', lwd=2)
lines(ts(prev2$pred+1.96*prev2$se,
start=c(2014,07), freq=12),
col='darkred', lwd=2, lty=2)
lines(ts(prev2$pred-1.96*prev2$se,
start=c(2014,07), freq=12),
col='darkred', lwd=2, lty=2)
erro1 <- matrix(NA, nrow=length(window(y, start=2013)), ncol=1)
erro2 <- matrix(NA, nrow=length(window(y, start=2013)), ncol=1)
reqm1 <- sqrt(sum(erro1^2)/length(erro1))
erro1 <- matrix(pib, nrow=length(window(y, start=2013)), ncol=1)
erro1 <- matrix(pib, nrow=length(window(y)), ncol=1)
for (i in 1:length(erro1))
erro1[i] <- y[(length(window(y, end=c(2012, 12)))+i)] -
predict(
arima(y[1:(length(window(y, end=c(2012, 12)))+i-1)], order=c(1,0,0)),
n.ahead=1)$pred
erro1 <- ts(erro1, start=2013, freq=12)
erro1 <- matrix(pib, nrow=length(window(y)), ncol=1)
for (i in 1:length(erro1))
erro1[i] <- y[(length(window(y, end=c(2012, 12)))+i)] -
predict(
arima(y[1:(length(window(y, end=c(2012, 12)))+i-1)], order=c(1,0,0)),
n.ahead=1)$pred
erro1 <- ts(erro1, freq=12)
erro1 <- matrix(NA, nrow=length(window(y, start=2013)), ncol=1)
erro1 <- matrix(NA, nrow=length(window(y, start=1990)), ncol=1)
erro1 <- matrix(NA, nrow=length(window(y, start=1990)), ncol=1)
erro1 <- matrix(NA, nrow=length(window(y, start=2030)), ncol=1)
