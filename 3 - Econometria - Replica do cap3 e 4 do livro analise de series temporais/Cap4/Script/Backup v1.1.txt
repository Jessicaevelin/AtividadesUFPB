---
title: "Cap4 - Processos não estacionarios - Series Temporais"
author: "Jessica"
date: "11/09/2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
yt <- AirPassengers
```

# 5 Função de autocorrelação - pág 38 #

```{r}
TT <- 200

ar1 <- acf(arima.sim(model=list(ar=0.9), n=TT),
  ylab=expression(Y[t]),
  main=expression(paste("AR(1) com ", theta, "=0.9")))
```

# 6.  Função de autocorrelação parcial - pág 39 #

```{r}
TT <- 200

ar1 <- pacf(arima.sim(model=list(ar=0.9), n=TT),
  ylab=expression(Y[t]),
  main=expression(paste("AR(1) com ", theta, "=0.9")))
```


#8. O teste de Dickey-Fuller #
  
```{r echo=FALSE}
plot(yt,
  ylab=expression(yt),
  main='',
  bty='l',
col='blue')
grid(col='darkgrey', lwd=2)
```
  
```{r}
summary(lm(diff(yt)~lag(yt,-1)[-length(yt)] - 1))
```

-----
Intalando Pacotes necessarios para continuar os testes.

```{r eval=FALSE, include=FALSE}
install.packages("urca")
```

```{r include=FALSE}
require(urca)
```

## 8.3 Teste Dickey-Fuller - Pág 48 até 51 ##

```{r}
summary(ur.df(yt, type='none', lags=0))
```

```{r}
dyt <- diff(yt)
summary(ur.df(dyt, type='none', lags=0))
```

```{r}
plot(dyt,
  ylab=expression(dyt),
  main='',
  bty='l',
col='blue')
grid(col='darkgrey', lwd=2)
```

```{r}
ytanalise = ts(cumsum(rnorm(200)), end=c(2020,12), freq=12)
plot(ytanalise)
grid(col='darkgrey', lwd=2)

```

## 8.4 Teste Phillips-Perron - Pág 53 ##

```{r}
set.seed(12)
t <- 200
y1 <- ts(cumsum(rnorm(t)))
y2 <- rnorm(t)
```


```{r}
ts.plot(y1, y2,
  ylab='', xlab='Tempo',
  main='',
  col=c('blue', 'red'),
  lwd=2)
grid(col='darkgrey', lwd=2)

legend('bottom',c('Passeio aleatório','Ruído branco'),
  lwd=2, col=c('blue','red'), bty='n')
```

```{r}
PP.test(y1)
```

```{r}
PP.test(y2)
```

## 8.5 O teste ADF sequencial - Pág 54 ##

```{r}
y <- read.table('table17-2.txt', header=T)$PPDI
y <- ts(y, start = 1970, freq=1)
```

```{r}
plot(y, col='blue', main='Renda disponível',
bty='l', xlab='Ano', ylab='$')
```

```{r}
adf.y <- ur.df(y, type='trend', lags=3)

acf(adf.y@res, ci.type='ma', main='ACF Resíduos - ADF com 3 defasagens',
  xlab='Defasagem')
```

```{r}
adf.y <- ur.df(y, type='trend', lags=2)

acf(adf.y@res, ci.type='ma', main='ACF Resíduos - ADF com 2 defasagens',
xlab='Defasagem')
```

```{r}
adf.y <- ur.df(y, type='trend', lags=0)

acf(adf.y@res, ci.type='ma', main='ACF Resíduos - ADF sem defasagem',
xlab='Defasagem')
```


```{r}
summary(adf.y)
```


```{r}
adfd.y <- ur.df(y, type='drift', lags=0)

summary(adfd.y)
```

## 9 Estimando modelos ARIMA - pág 64 ##

```{r}
adf1 <- ur.df(ipcad, type='drift', lags=6)
acf(adf1@res, ci.type='ma',
main='Resíduos de teste ADF - 6 defasagens',
xlab='Defasagem')
```

```{r}
summary(adf1)
```

```{r}
par(mfrow=c(2,1))
acf(ipcad, ci.type='ma', main='IPCA (variação mensal)')
pacf(ipcad, main='')
```

```{r}
coeftest(arima(ipcad, order=c(2,0,2)))
```

```{r}
coeftest(arima(ipcad, order=c(2,0,1)))
```

```{r}
coeftest(arima(ipcad, order=c(1,0,1)))
```

```{r}
coeftest(arima(ipcad, order=c(1,0,0)))
```

```{r}
Box.test(resid(reg.ipca), lag=6, type='Ljung-Box', fitdf=1)
```

```{r}
par(mfrow=c(1,2))
acf(resid(reg.ipca), main='Resíduos ARMA(1,0)', ci.type='ma')
pacf(resid(reg.ipca), main='Resíduos ARMA(1,0)')
```

```{r}
Box.test(resid(reg.ipca), lag=7, type='Ljung-Box', fitdf=1)
```

```{r}
monthplot(ipca, col='darkblue', col.base='red',
  main='IPCA por mês e IPCA médio por mês',
  ylab='IPCA (%)', lty.base=2)

legend('bottomleft', legend=c('IPCA', 'Média'), lty=c(1,2),
  col=c('darkblue', 'red'), bty='n')
```

```{r}
ljung.n <- function(dados, lag.final,fitdf=1)
pvalores <- matrix(NA, nrow=lag.final, ncol=1)
for (i in 1:lag.final)
pvalores[i] <- Box.test(dados, fitdf=fitdf, lag=i)$p.value
return(pvalores)
```

```{r}
shapiro.test(resid(reg.ipca))
```

```{r}
AIC(reg.ipca)
AIC(update(reg.ipca, order=c(0,0,1)))
AIC(update(reg.ipca, order=c(1,0,1)))
AIC(update(reg.ipca, order=c(2,0,2)))
```

## 10 - Precisão com modelos ARIMA ##

```{r}
prev <- predict(reg.ipca, n.ahead=4)
```

```{r}
par(mfrow=c(1,2))
ts.plot(window(ipca, start=2013),
  prev$pred,
  prev$pred+1.96*prev$se,
  prev$pred-1.96*prev$se,
  col=c(1,2,2,2), lty=c(1,1,2,2))

plot(window(ipca, start=2013),
  xlim=c(2013, 2015.2),
  col='darkblue', lwd=2, bty='l', ylab='IPCA',
  main='Previsão IPCA - Modelo AR(1)')

lines(ts(c(ipca[length(ipca)],prev$pred), start=c(2014,10), freq=12),
  col='red', lwd=2)

lines(ts(c(ipca[length(ipca)],prev$pred+1.96*prev$se),
  start=c(2014,10), freq=12),
  col='darkred', lwd=2, lty=2)

lines(ts(c(ipca[length(ipca)],prev$pred-1.96*prev$se),
  start=c(2014,10), freq=12),
  col='darkred', lwd=2, lty=2)
```

```{r}
pca.b <- window(ipca, end=c(2014, 06))

reg.ipca.b <- arima(ipca.b, order=c(1,0,0))

prev2 <- predict(reg.ipca.b, n.ahead=4)
```

```{r}
par(mfrow=c(1,2))

ts.plot(window(ipca, start=2013),
  prev2$pred,
  prev2$pred+1.96*prev2$se,
  prev2$pred-1.96*prev2$se,
  col=c(1,2,2,2), lty=c(1,1,2,2))

plot(window(ipca, start=2013),
  col='darkblue', lwd=2, bty='l', ylab='IPCA',
  main='Previsão IPCA - Modelo AR(1)')

lines(ts(prev2$pred, start=c(2014,07), freq=12),
  col='red', lwd=2)
lines(ts(prev2$pred+1.96*prev2$se,
  start=c(2014,07), freq=12),
  col='darkred', lwd=2, lty=2)

lines(ts(prev2$pred-1.96*prev2$se,
start=c(2014,07), freq=12),
col='darkred', lwd=2, lty=2)
```

```{r}
erro1 <- matrix(NA, nrow=length(window(ipcad, start=2013)), ncol=1)

for (i in 1:length(erro1))
  
  erro1[i] <- ipcad[(length(window(ipcad, end=c(2012, 12)))+i)] -
  
  predict(
  arima(ipcad[1:(length(window(ipcad, end=c(2012, 12)))+i-1)], order=c(1,0,0)),
  n.ahead=1)$pred

  erro1 <- ts(erro1, start=2013, freq=12)
```

```{r}
erro2 <- matrix(NA, nrow=length(window(ipcad, start=2013)), ncol=1)

for (i in 1:length(erro1))

  erro2[i] <- ipcad[(length(window(ipcad, end=c(2012, 12)))+i)] -
  predict(arima(ipcad[1:(length(window(ipcad, end=c(2012, 12)))+i-1)], order=c(1,0,1)),
  n.ahead=1)$pred

erro2 <- ts(erro2, start=2013, freq=12)
```

```{r}
reqm1 <- sqrt(sum(erro1^2)/length(erro1))
reqm2 <- sqrt(sum(erro2^2)/length(erro2))
reqm1
reqm2
eam1 <- sum(abs(erro1))/length(erro1)
eam2 <- sum(abs(erro2))/length(erro2)
eam1
eam2
```

```{r}
reqm <- function(serie)
reqm <- sqrt(sum(serie^2)/length(serie))
print(reqm)
```

```{r}
eam <- function(serie)
eam <- sum(abs(serie))/length(serie)
print(eam)
```

