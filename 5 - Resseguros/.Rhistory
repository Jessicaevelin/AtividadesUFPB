vn = (r*q)/p^2
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
qnorm(0.99)
xres<-data.frame(x=c(10-15,20-15,30-15,40-15,50-15),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
vn = (r*q)/p^2
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
pp
pp
pp
pp
pp
pp
pp
xres<-data.frame(x=c(10,15,15,15,15),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
vn = (r*q)/p^2
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
pp
pp
x=c(10,20,30,40,50)
lt=c(15,15,15,15,15)
z= x-lt
z
# Valores do sinistros
xres<-data.frame(x=c(0,5,15,25,35),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
vn = (r*q)/p^2
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
pp
pp
pp
pp
pp
pp
en
vn = (r*q)/p^2
vn
# S
en = (r*p)/q
en
vn = (r*p)/q^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
pp
pp
pp
pp
pp
pp
pp
qnorm(1-0.025
qnorm(1-0.025)
qnorm(1-0.025)
# Valores do sinistros
xres<-data.frame(x=c(0,5,15,25,35),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
pp
pp
pp
pp
qnorm(0.975)
rm(list=ls(all=TRUE))
# Valores do sinistros
xres<-data.frame(x=c(10,20,30,40,50),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
xres<-data.frame(x=c(10,15,15,15,15),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
# Valores do sinistros
xres<-data.frame(x=c(0,5,15,25,35),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
rm(list=ls(all=TRUE))
xres<-data.frame(x=c(0,5,15,25,35),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
pp = es + qnorm(0.975) * ds
pp
pp
ds
# Valores do sinistros
xres<-data.frame(x=c(
10,20,30,40,50),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
ds
pp = es + qnorm(0.975) * ds
pp
xres<-data.frame(x=c(
0,5,15,25,35),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
ds
pp = es + qnorm(0.975) * ds
pp
xres<-data.frame(x=c(
10,15,15,15,15),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
ds
pp = es + qnorm(0.975) * ds
pp
xres<-data.frame(x=c(0,5,15,25,35),px=c(0.3, 0.4, 0.18, 0.08, 0.04))
xres
ex = sum(xres$x * xres$px)
ex
ex2 = sum(xres$x^2 * xres$px)
ex2
vx = ex2 - ex^2
vx
# (N)
r = 1000
p = 0.8
q = 0.2
en = (r*q)/p
en
vn = (r*q)/p^2
vn
# S
es = en * ex
es
vs = ex^2 * vn + en * vx
vs
ds = sqrt(vs)
ds
pp = es + qnorm(0.975) * ds
pp
q()
valores_sinistros = data.frame(x = c(0,0,10,20,30), px = c(0.3,0.4,0.18,0.08,0.04)
valores_sinistros = data.frame(x = c(0,0,10,20,30), px = c(0.3,0.4,0.18,0.08,0.04))
valores_sinistros = data.frame(x = c(0,0,10,20,30), px = c(0.3,0.4,0.18,0.08,0.04))
valores_sinistros = data.frame(x = c(0,0,10,20,30), px = c(0.3,0.4,0.18,0.08,0.04)
valores_sinistros = data.frame(x = c(0,0,10,20,30), px = c(0.3,0.4,0.18,0.08,0.04)
valores_sinistros <- data.frame(x = c(0,0,10,20,30), px = c(0.3,0.4,0.18,0.08,0.04))
valores_sinistros
X <- data.frame(x = c(0,0,10,20,30), px = c(0.3,0.4,0.18,0.08,0.04))
X
ex = sum(X$x * X$px)
ex
ex2 = sum(X$x^2 * X$px) ; ex2
vx = ex2 - (ex)^2
vx = ex2 - (ex)^2 ; vx
q()
load("D:\\Google Drive\\6 - R\\5 - Resseguros\\.RData")
##### 1- B #####
#
# Severidade
X <- data.frame(x = c(0,0,10,20,30), px = c(0.3,0.4,0.18,0.08,0.04)); X
ex = sum(X$x * X$px) ; ex
ex2 = sum(X$x^2 * X$px) ; ex2
vx = ex2 - (ex)^2 ; vx
# Frequência
n <- 1000
p <- 0.8
q <- 0.2
en = (n*q)/p ; en
vn = (n*q)/p^2 ; vn
# Sinistro Agregado
es = en * ex ; es
vs = (ex)^2 * vn + en * vx ; vs
ds = sqrt( vs ) ; ds
# Prêmio Puro da resseguradora
# Z(1-a) = Z(1-0.025) = Z(0.975) = qnorm(0.975)
pp = es + qnorm(0.975) * ds ; pp
theta1 = (qnorm(0.975) * ds)/es ; theta1
#
###### 1 - C #####
#
# theta = margem de segurança
# LT = 20 , theta = 10%
theta2 <- 0.1
pp2 = es * (1 + theta2) ; pp2
$px > 20
X$px > 20
Z <- data.frame(z = c(10,20,30,40,50), pz = c(0.3,0.4,0.18,0.08,0.04)); Z
Z$z > 20
if (Z$z > 20, Z$z * pz, 0) {
x <- Z$z
x
if (x > 20) {
  res <- "Número igual a 30"
} else {
    res <- "Número diferente de 30"
  }
print(res)
if (x == 30) {
  res <- "Número igual a 30"
  print(res)
}
x <- Z$z
if (x == 30) {
  res <- "Número igual a 30"
  print(res)
}
x <- Z$z
if (x > 30) {
  res <- "Número igual a 30"
  print(res)
}
if (x > 30) {
  res
}
x
x <- Z$z
if (x==20) {1}
a=4
b=6
if (a>b) {
print (paste(“o maior numero é:”,a))
}else{
print(paste(“o maior numero é:”,b))
}
a=4
b=6
if (a>b) {
print (paste(“o maior numero é:”,a))
}else{
print(paste(“o maior numero é:”,b))
}
a=4
b=6
if (a>b) {
print (“o maior numero é:”,a)
}else{
print(“o maior numero é:”,b)
}
a=4
b=6
if (a>b) {
print a
}else{
print b
}
a=4
b=6
if (a>b) {
}else{
}
x <- 1:10 
ifelse(x<5 | x>8, x, 0)
y <- Z$z
ifelse(y>20,x,0)
y
ifelse(y>20,sum(Z$z*pz),0)
y <- Z$z
ifelse(y>20,sum(Z$z*Z$pz),0)
ifelse(y>20,(Z$z*Z$pz),0)
rm(list=ls(all=TRUE)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
y <- Z$z ; Y
Z <- data.frame(z = c(10,20,30,40,50), pz = c(0.3,0.4,0.18,0.08,0.04)); Z
y <- Z$z ; Y
y <- Z$z ; Y
y <- Z$z ; y
ifelse(y>20,(Z$z*Z$pz),0)
y <- Z$pz ; y
ifelse(y>20,y,0)
Fx = z>20
ifelse ( Z>20, pz,0)
ifelse ( Z>20, Z$pz,0)
ifelse ( Z$z > 20, Z$pz,0)
ifelse ( Z$z > 20) {sum Z$z} else {0}
ifelse ( Z$z > 20) {
sum Z$z
} else {
0
}
ifelse ( Z$z > 20) {sum Z$z} else {0}
zz<- ifelse ( Z$z > 20, Z$z, 0)
zz
zz<- ifelse ( Z$z > 20, Z$pz, 0)
zz
sum(zz)
ifelse ( Z$z > 20) {
sum Z$z
} else {
0
prob.table(Z)
0.01*(0.18+0.08+0.04)
q()
