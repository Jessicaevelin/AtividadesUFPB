setwd("D:/Google Drive/2 - Ufpb/P5/Teoria")
setwd("D:/Google Drive/2 - Ufpb/P5/Teoria/R")
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
plotcar
plot(cars)
plot(cars)
plot(cars)
1+1
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
source('D:/Google Drive/2 - Ufpb/P5/Teoria/Conolução no r.R')
source('D:/Google Drive/2 - Ufpb/P5/Teoria/Conolução no r.R')
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
Examples
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
#probabilidade discretas de N
pn <- c(0.3, 0.4, 0.3)
#função de fs
#x.scale - valor monetário de 1 sinistro
Fs <- aggregateDist("convolution", model.freq = pn,
model.sev = fx, x.scale = 1)
summary(Fs)
#diff(Fs(1 * (intervalo do fs(0) até fs(6)))
c(Fs(0), diff(Fs(1 * 0:6))) # probability mass function
plot(Fs)
fx <- c(0, 0.6, 0.3, 0.1)
fx <- c(0, 0.6, 0.3, 0.1)
fx <- c(0, 0.6, 0.3, 0.1)
fx <- c(0, 0.6, 0.3, 0.1)
fx <- c(0, 0.6, 0.3, 0.1)
```fx <- c(0, 0.6, 0.3, 0.1)
```fx <- c(0, 0.6, 0.3, 0.1)
fx <- c(0, 0.6, 0.3, 0.1)
Exemplo
método de convolução ( exemplo 1 - página 37 - ferreira 2002)
probabilidades discretas de X
```{r}
fx <- c(0, 0.6, 0.3, 0.1)
````
probabilidade discretas de N
fx <- c(0, 0.6, 0.3, 0.1)
summary(Fs)
diff(Fs(1 * (intervalo do fs(0) até fs(6)))
c(Fs(0), diff(Fs(1 * 0:6))) # probability mass function
plot(Fs)
```{r}
pn <- c(0.3, 0.4, 0.3)
```
Fs <- aggregateDist("convolution", model.freq = pn,model.sev = fx, x.scale = 1)
Fs <- aggregateDist("convolution", model.freq = pn,model.sev = fx, x.scale = 1)
fx <- c(0, 0.6, 0.3, 0.1)
pn <- c(0.3, 0.4, 0.3)
Fs <- aggregateDist("convolution", model.freq = pn,model.sev = fx, x.scale = 1)
Fs <- aggregateDist("convolution", model.freq = pn,model.sev = fx, x.scale = 1)
Fs<- aggregateDist("convolution", model.freq = pn,model.sev = fx, x.scale = 1)
## método de convolução ( exemplo 1 - página 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
plot(cars)
---
title: "Convolução - exemplo1 - pag 37 - ferreira 2002"
pacote: ?actuar
---
?actuar
??actuar
??actuar
library(actuar)
??actuar
??aggregateDist
??aggregateDist {actuar}
aggregateDist()
help aggregateDist()
help(aggregateDist())
help(aggregateDist
help(aggregateDist
help(aggregateDist)
help(aggregateDist)
help(aggregateDist)
??(aggregateDist)
??aggregateDist
fx <- c(0, 0.6, 0.3, 0.1)
Examples
## m?todo de convolu??o ( exemplo 1 - p?gina 37 - ferreira 2002)
#probabilidades discretas de X
fx <- c(0, 0.6, 0.3, 0.1)
fx <- c(0, 0.6, 0.3, 0.1)
pn <- c(0.3, 0.4, 0.3)
Fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
require(actuar)
require(actuar)
require(actuar)
fx <- c(0, 0.6, 0.3, 0.1)
Fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
Fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
summary(Fs)
c(Fs(0), diff(Fs(1 * 0:6))) # probability mass function
plot(Fs)
Fs
require(actuar)
fx <- c(0, 0.6, 0.3, 0.1)
pn <- c(0.3, 0.4, 0.3)
Fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
Fs
summary(Fs)
c(Fs(0), diff(Fs(1 * 0:6))) # probability mass function
pbinom(x,10,0.1)
x =c(0,1,2,3,4,5,6,7,8,9,10)
pbinom(x,10,0.1)
dbinom(x,10,0.1)
fx = 0,1*x
pn =c dbinom(x,10,0.1)
pn< = dbinom(x,10,0.1)
pn <= dbinom(x,10,0.1)
pn <-c(dbinom(x,10,0.1))
pn <-c(dbinom(x,10,0.1))
pn
fx<-c(0,1*x)
fx
fx
fx<-c(0,1*x)
fx
,1*x
0,1*x
=0,1*x
fx<-c(0.1*x)
fx<-c(0.1*x)
fx
fx
Fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
Fs
summary(Fs)
c(Fs(0), diff(Fs(1 * 0:6))) # probability mass function
plot(Fs)
pn <-c(dpois(x,2)
pn
pn <-c (dpois(x;2))
pn <-c (dpois(x ;2))
x =c(0:4)
pn <-c (dpois(x ;2))
pn <-c(dpois(x ;2))
pn<-c(dpois(x,2))
pn
fx<-c(0.1*x)
fx<-c(0.1*x)
fx
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
fs
summary(fs)
c(Fs(0), diff(Fs(1 * 0:6))) # probability mass function
c(Fs(0), diff(Fs(1 * 0:16))) # probability mass function
fs<-c(Fs(0), diff(Fs(1 * 0:16))) # probability mass function
Fs
c(Fs(0), diff(Fs(1 * 0:16))) # probability mass function
0.3486784401+0.0387420489+0.0794212002+0.1240319521+0.1746847098+0.2336665447+0.0007751041
install.packages("actuar")
Fscol<-c(c(Fs(0), diff(Fs(1 * 0:16))))
Fscol<-c(c(Fs(0), diff(Fs(1 * 0:16))))
Fscol
FScol <- cumsum(Fscol)
FSCOl
FScol
install.packages("actuar")
require(actuar)
x =c(0:4)
pn<-c(dpois(x,2))
pn
fx<-c(0.1*x)
fx
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
fs
summary(fs)
Fscol<-c(c(Fs(0), diff(Fs(1 * 0:16))))
Fscol
plot(Fs)
FSCOL <- cumsum(Fscol)
FSCOL
fscol<-c(c(Fs(0), diff(Fs(1 * 0:16))))
fscol
library(actuar)
pn<-c(dexp(x)
pn
pn
pn<-c(dexp(x)
pn<-c(dexp(x,0.1)
pn<-c(dexp(x,0.1)
pn
pn<-c( dexp(x,0.1))
pn
x=c(0:4)
pn<-c( dexp(x,0.1))
pn
fx<-c( dexp(x,0.1))
fx<-c( dexp(x,0.1))
fx<-c( dexp(x,0.1))
x=c(0:4)
fx<-c( dexp(x,0.1))
fx
pn<-c(dbinom(x,10,0.1)
pn<-c(dbinom(x,10,0.1)
pn<-c(dbinom(x,10,0.1)
pn
pn <-c(dbinom(x,10,0.1)
pn
pn <-c(dbinom(x,10,0.1, FALSE)
pn <-c(dbinom(x,10,0.1, FALSE)
pn<-c( dbinom(x,10,0.1)
pn
pn<-c( dbinom(x,10,0.1)
pn<-c(dbinom(x,10,0.1)
pn<-c(dbinom(x, 10, 0.1)
pn <-c(dbinom(x, 10, 0.1)
pn <-c (dbinom(x, 10, 0.1)
pn <-c ( dbinom(x, 10, 0.1)
pn <-c ( dbinom (x, 10, 0.1)
pn<-c(dbinom(x,10,0.1)
pn<-c(dbinom(x,10,0.1))
pn<-c(pbinom(x,10,0.1))
pn<-c(pbinom(x,10,0.1))
pn<-c(dbinom(x,10,0.1))
pn
pn<-c(dbinom(x,10,0.1))
pn
x=c(0:4)
fx<-c( dexp(x,0.1))
fx
pn<-c(dbinom(x,10,0.1))
pn
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
fs
summary(fs)
fscol<-c(c(Fs(0), diff(Fs(1 * 0:16))))
fscol<-c(c(fs(0), diff(fs(1 * 0:16))))
fscol
plot(Fs)
plot(fs)
FSCOL <- cumsum(Fscol)
FSCOL <- cumsum(fscol)
FSCOL
fscol<-c(c(fs(0), diff(fs(1 * 0:4))))
fscol
FSCOL <- cumsum(fscol)
FSCOL
x=c(0:4)
fscol<-c(c(Fs(0), diff(Fs(1 * 0:4))))
fscol<-c(c(fs(0), diff(fs(1 * 0:4))))
fscol
plot(fs)
FSCOL <- cumsum(fscol)
FSCOL
install.packages("contrib.url")
install.packages("actuar")
install.packages("contrib.url")
install.packages("actuar")
require(actuar)
x =c(0:4)
pn<-c(dpois(x,2))
pn
fx<-c(0.1*x)
fx
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
fs
summary(fs)
fscol<-c(c(fs(0), diff(fs(1 * 0:4))))
fscol
plot(fs)
FSCOL <- cumsum(fscol)
FSCOL
#install.packages("actuar")
require(actuar)
x =c(0:4)
pn<-c(dbinom(x,10,0.1))
pn
fx<-c(0.1*x)
fx
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
fs
summary(fs)
fscol<-c(c(fs(0), diff(fs(1 * 0:4))))
fscol
plot(fs)
FSCOL <- cumsum(fscol)
FSCOL
require(actuar)
x =c(0:4)
pn<-c(dbinom(x,10,0.1))
pn
fx<-c(0.1*x)
fx
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
summary(fs)
fscol<-c(c(fs(0), diff(fs(1 * 0:4))))
fscol
plot(fs)
FSCOL <- cumsum(fscol)
FSCOL
x =c(0:4)
pn<-c(dbinom(x,10,0.1))
pn
fx<-c(0.1*x)
fx
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
require(actuar)
require(actuar)
x =c(0:4)
pn<-c(dbinom(x,10,0.1))
pn
fx<-c(0.1*x)
fx
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
summary(fs)
fscol<-c(c(fs(0), diff(fs(1 * 0:4))))
fscol
plot(fs)
FSCOL <- cumsum(fscol)
FSCOL
pn<-c(dpois(x,0.1)
pn
pn<-c( dpois(x,0.1)
pn
pn<-c( dpois(x,0.1)
pn
pn<-c( dpois(x,0.1)
pn
pn
pn<-c( dpois(x,0.1)
pn <-c( dpois(x,0.1)
pn <-c(ppois(x,0.1)
pn<-c(ppois(x,0.1)
pn<-c(dpois(x,0.1)
pn
pn
pn<-c(dpois(x,0.1)
pn<=c(dpois(x,0.1)
x=c(0:4)
fx<-c( dexp(x,0.1))
fx
pn <-c(dpois(x,0.1))
pn
fs <- aggregateDist("convolution", model.freq = pn, model.sev = fx, x.scale = 1)
summary(fs)
fscol<-c(c(fs(0), diff(fs(1 * 0:4))))
fscol
plot(fs)
FSCOL <- cumsum(fscol)
FSCOL
